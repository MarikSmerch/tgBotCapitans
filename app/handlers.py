from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton, FSInputFile
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.filters import CommandStart, Command, StateFilter
import app.database.requests as rq
from functools import wraps

from aiogram.fsm.context import FSMContext
from app.states.registration import FSMRegistration

import pandas as pd
import os

from datetime import datetime

import re

from app.configAdmin import is_admin

router = Router()

user_edit_mode = {}
user_prompt_message_id = {}
user_error_message_id = {}
admin_cons_mode = {}
admin_int_mode = {}
admin_event_mode = {}
admin_event_data = {}
DIRECTIONS = {
    "dir_1": "39.03.01 –°–æ—Ü–∏–æ–ª–æ–≥–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π",
    "dir_2": "38.03.01 –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "dir_3": "42.03.01 –†–µ–∫–ª–∞–º–∞ –∏ —Å–≤—è–∑–∏ —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é",
    "dir_4": "38.03.06 –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –≤ –∫–æ–º–º–µ—Ä—Ü–∏–∏",
    "dir_5": "38.05.01 –≠–∫–æ–Ω–æ–º–∏–∫–æ-–ø—Ä–∞–≤–æ–≤–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ "
    "—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "dir_6": "40.03.01 –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è",
    "dir_7": "40.05.01 –ü—Ä–∞–≤–æ–≤–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "dir_8": "41.03.06 –ü—É–±–ª–∏—á–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
}


def admin_only(handler):
    @wraps(handler)
    async def wrapper(message: Message, *args, **kwargs):
        if not is_admin(message.from_user.id):
            await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper


def get_edit_profile_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–ò–û",
                              callback_data="edit_fio")],
        [InlineKeyboardButton(text="–ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
                              callback_data="edit_year")],
        [InlineKeyboardButton(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                              callback_data="edit_phone")],
        [InlineKeyboardButton(text="–ì–æ—Ä–æ–¥",
                              callback_data="edit_city")],
        [InlineKeyboardButton(text="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                              callback_data="edit_direction")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                              callback_data="show_profile")]
    ])


def get_events_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="events_add")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="events_edit")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="events_delete")]
    ])


def get_change_cons_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É",
                              callback_data="change_cons_add")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É",
                              callback_data="change_cons_del")]
    ])


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(obj):
    if isinstance(obj, CallbackQuery):
        msg = obj.message
        await obj.answer()
    else:
        msg = obj

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å",
                                  callback_data="show_profile")],
            [InlineKeyboardButton(text="–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å",
                                  callback_data="entrance")],
            [InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
                                  callback_data="consultation")],
            [InlineKeyboardButton(text="–ö–∞–ª–µ–Ω–¥–∞—Ä—å",
                                  callback_data="events")],
            [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º",
                                  callback_data="mentor")],
        ]
    )
    caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    await msg.answer_photo(
        photo=FSInputFile("app/img/menu.png"),
        caption=caption,
        reply_markup=keyboard,
    )


async def show_slots_list(send_func):
    slots = await rq.get_consultation_slots()
    if not slots:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await send_func("‚ùå –°–ª–æ—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=kb)
        return

    buttons = [
        [InlineKeyboardButton(text=slot_text,
                              callback_data=f"cons_slot_{slot_id}")]
        for slot_id, slot_text in slots
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="main_menu")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await send_func("üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=kb)


async def send_users_excel(users, caption, message):
    filename = f"app/temp/{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"

    df = pd.DataFrame([{
        "Telegram": f"tg://user?id={u.tg_id}",
        "–§–∞–º–∏–ª–∏—è": u.surname,
        "–ò–º—è": u.name,
        "–û—Ç—á–µ—Å—Ç–≤–æ": u.patronymic,
        "–ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è": u.entry_year,
        "–¢–µ–ª–µ—Ñ–æ–Ω": u.phone_number,
        "–ì–æ—Ä–æ–¥": u.city,
        "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": u.direction
    } for u in users])

    df.to_excel(filename, index=False)

    await message.answer_document(FSInputFile(filename), caption=caption)

    os.remove(filename)


async def safe_answer(callback: CallbackQuery, text: str = None,
                      show_alert=False):
    try:
        await callback.answer(text=text, show_alert=show_alert)
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            await callback.message.answer("–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –í–æ—Ç –Ω–æ–≤–æ–µ –º–µ–Ω—é:")
            await send_main_menu(callback.message)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
async def send_profile_menu(send_func, user):
    subscribed = bool(await rq.get_subscribed(user.id))
    user_p = await rq.get_user_by_tg_id(user.id)

    if user_p.phone_number != "-":
        hidden_phone = user_p.phone_number[:-4] + "XXXX"
    else:
        hidden_phone = user_p.phone_number

    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: {user_p.surname} {user_p.name} {user_p.patronymic}\n"
        f"–ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {user_p.entry_year}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {hidden_phone}\n"
        f"–ì–æ—Ä–æ–¥: {user_p.city}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user_p.direction}\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '‚Äî'}"
    )

    sub_text = (
        "üì© –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
        if subscribed
        else "üì¥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                     callback_data="main_menu"),
                InlineKeyboardButton(text=sub_text,
                                     callback_data="toggle_subscription")
            ],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                  callback_data="edit_profile")]
        ]
    )

    await send_func(profile_text, parse_mode="HTML", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
async def send_about_entrance(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
                              callback_data="appointment_interview")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                              callback_data="main_menu")]
    ])
    await message.answer_photo(
        photo=FSInputFile("app/img/entrance.png"),
        caption="<b>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ</b>\n\n–ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
        parse_mode="HTML",
        reply_markup=keyboard
    )


def get_change_int_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É",
                              callback_data="change_int_add")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É",
                              callback_data="change_int_del")]
    ])


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
async def send_features(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                                  callback_data="appointment_consultation")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                  callback_data="main_menu")]
        ]
    )
    await send_func("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                    reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
async def send_mentor(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                  callback_data="main_menu")]
        ]
    )
    await message.answer_photo(
        photo=FSInputFile("app/img/mentor.png"),
        caption="–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º",
        reply_markup=keyboard
    )


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
async def send_events(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                  callback_data="main_menu")]
        ]
    )

    events = await rq.get_all_events()
    if not events:
        event_text = ("<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</b>"
                      "\n\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
    else:
        def sort_key(slot: str):
            date_part = slot.split()[0]
            try:
                day_str, month_str = date_part.split(".")
                day, month = int(day_str), int(month_str)
                return (month, day)
            except Exception:
                return (999, 999)

        sorted_events = sorted(events, key=lambda e: sort_key(e[0]))

        lines = [f"{slot} - {content}" for slot, content in sorted_events]
        event_text = ("<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</b>"
                      "\n\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n\n" + "\n".join(lines))

    await send_func(event_text,
                    parse_mode="HTML",
                    reply_markup=keyboard)


async def send_consultation_slots(send_func, tg_id: int):
    slots = await rq.get_consultation_slots()
    user_slot = await rq.get_user_slot(tg_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                               callback_data="main_menu")]]
    )

    if not slots:
        await send_func(
            "<b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º."
            "\n\n‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        return

    buttons = []
    for slot_id, slot_text in slots:
        label = f"{slot_text}{' ‚úÖ' if slot_text == user_slot else ''}"
        buttons.append([InlineKeyboardButton(text=label,
                                             callback_data=f"slot_{slot_id}")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                         callback_data="main_menu")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await send_func(
        "<b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º:",
        parse_mode="HTML",
        reply_markup=kb
    )


async def send_interview_slots(send_func, tg_id: int):
    slots = await rq.get_interview_consultation_slots()
    user_slot = await rq.get_user_slot_interview(tg_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                               callback_data="main_menu")]]
    )

    if not slots:
        await send_func(
            "<b>–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</b>\n\n"
            "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.\n\n"
            "‚ùå –ü–æ–∫–∞ –¥–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        return

    buttons = []
    for slot_id, slot_text in slots:
        check_mark = " ‚úÖ" if slot_text == user_slot else ""
        label = f"{slot_text}{check_mark}"
        buttons.append(
            [
                InlineKeyboardButton(
                    text=label,
                    callback_data=f"interview_slot_{slot_id}",
                ),
            ],
        )

    buttons.append(
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                              callback_data="main_menu")]
    )
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await send_func("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:", reply_markup=kb)


async def show_interview_slots_list(send_func):
    slots = await rq.get_interview_consultation_slots()
    buttons = [
        [InlineKeyboardButton(text=slot_text,
                              callback_data=f"int_slot_{slot_id}")]
        for slot_id, slot_text in slots
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await send_func("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π:", reply_markup=kb)


# /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    await rq.set_user(user_id)
    user = await rq.get_user_by_tg_id(user_id)
    if not (
        user.surname
        and user.name
        and user.patronymic
        and user.entry_year
        and user.phone_number
    ):
        await state.set_state(FSMRegistration.full_name)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ <b>–§–ò–û</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n<b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</b>\n\n"
            "–ó–∞–ø–æ–ª–Ω—è—è –¥–∞–Ω–Ω—ã–µ, —è –¥–∞—é —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É "
            "–º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º "
            "–∑–∞–∫–æ–Ω–æ–º –æ—Ç 27.07.2006 ‚Ññ152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª, "
            "–Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –∏ –¥–ª—è —Ü–µ–ª–µ–π, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –≤ –°–æ–≥–ª–∞—Å–∏–∏ "
            "–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode="HTML",
        )
    else:
        await send_main_menu(message)


# –∫–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def cb_main(callback: CallbackQuery):
    await rq.set_user(callback.from_user.id)
    await callback.message.delete()
    await send_main_menu(callback.message)
    await safe_answer(callback)


# –∫–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–∑ /send)
@router.callback_query(F.data == "main_menu_from_send")
async def cb_main_from_send(callback: CallbackQuery):
    await rq.set_user(callback.from_user.id)
    await send_main_menu(callback.message)
    await safe_answer(callback)


# –∫–Ω–æ–ø–∫–∞ –ü—Ä–æ—Ñ–∏–ª—å
@router.callback_query(F.data == "show_profile")
async def cb_show_profile(callback: CallbackQuery):
    await callback.message.delete()
    await send_profile_menu(callback.message.answer, callback.from_user)
    await safe_answer(callback)


# –∫–Ω–æ–ø–∫–∞ –í–∫–ª/–í—ã–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É
@router.callback_query(F.data == "toggle_subscription")
async def cb_toggle(callback: CallbackQuery):
    user_id = callback.from_user.id
    await rq.change_subscribed(user_id)
    await send_profile_menu(callback.message.edit_text, callback.from_user)
    await safe_answer(callback, "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω", show_alert=False)


# –∫–Ω–æ–ø–∫–∞ –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å
@router.callback_query(F.data == "entrance")
async def cb_captains(callback: CallbackQuery):
    await callback.message.delete()
    await send_about_entrance(callback.message)
    await safe_answer(callback)


@router.callback_query(F.data == "appointment_interview")
async def cb_appointment_interview(callback: CallbackQuery):
    await callback.message.delete()
    await send_interview_slots(callback.message.answer, callback.from_user.id)
    await safe_answer(callback)


@router.callback_query(F.data.startswith("interview_slot_"))
async def cb_interview_slot(callback: CallbackQuery):
    slot_id = int(callback.data[len("interview_slot_"):])
    tg_id = callback.from_user.id

    chosen = await rq.get_interview_slot_by_id(slot_id)
    current = await rq.get_user_slot_interview(tg_id)

    if current == chosen:
        await rq.clear_user_slot_interview(tg_id)
        await safe_answer(callback, "–ó–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await rq.set_user_slot_interview(tg_id, chosen)
        await safe_answer(callback, f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ: {chosen}")

    await send_interview_slots(callback.message.edit_text, tg_id)


@router.message(Command("events"))
@admin_only
async def cmd_events(message: Message):
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:",
                         reply_markup=get_events_kb())


@router.callback_query(F.data == "events_edit_start")
async def cmd_events_edit_start(query: CallbackQuery):
    await query.message.edit_text("–ß—Ç–æ –º–µ–Ω—è—Ç—å?", reply_markup=get_events_kb())
    await query.answer()


@router.callback_query(F.data == "events_add")
async def cb_events_add(query: CallbackQuery):
    admin_event_mode[query.from_user.id] = "add_date"
    admin_event_data[query.from_user.id] = {}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
                              callback_data="events_add_cancel")]
    ])
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú –ß–ß:–ú–ú</b>,"
        " –Ω–∞–ø—Ä–∏–º–µ—Ä `26.06 17:00`",
        parse_mode="HTML",
        reply_markup=kb
    )
    await query.answer()


@router.callback_query(F.data == "events_add_cancel")
async def cb_events_add_cancel(query: CallbackQuery):
    admin_event_mode.pop(query.from_user.id, None)
    admin_event_data.pop(query.from_user.id, None)
    await query.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                                  reply_markup=get_events_kb())
    await query.answer()


@router.message(StateFilter(None),
                lambda message: (admin_event_mode
                                 .get(message.from_user.id) == "add_date"))
async def msg_events_add_date(message: Message):
    user_id = message.from_user.id
    if admin_event_mode.get(user_id) != "add_date":
        return
    date_text = message.text.strip()
    admin_event_data[user_id]["date"] = date_text
    admin_event_mode[user_id] = "add_content"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
                              callback_data="events_add_cancel")]
    ])
    await message.answer(
        f"–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: <b>{date_text}</b>"
        "\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
        parse_mode="HTML",
        reply_markup=kb
    )


@router.message(StateFilter(None),
                lambda message: (admin_event_mode
                                 .get(message.from_user.id) == "add_content"))
async def msg_events_add_content(message: Message):
    user_id = message.from_user.id
    if admin_event_mode.get(user_id) != "add_content":
        return
    content = message.text.strip()
    date_text = admin_event_data[user_id]["date"]
    admin_event_data[user_id]["content"] = content
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="events_add_confirm")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="events_add_cancel")]
    ])
    await message.answer(
        f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?\n<code>{date_text} - {content}</code>",
        parse_mode="HTML",
        reply_markup=kb
    )


@router.callback_query(F.data == "events_add_confirm")
async def cb_events_add_confirm(query: CallbackQuery):
    user_id = query.from_user.id
    data = admin_event_data.get(user_id, {})
    await rq.add_event(data["date"], data["content"])
    admin_event_mode.pop(user_id, None)
    admin_event_data.pop(user_id, None)
    await query.message.edit_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",
                                  reply_markup=get_events_kb())
    await query.answer()


@router.callback_query(F.data == "events_edit")
async def cb_events_edit(query: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞—Ç–∞",
                              callback_data="events_edit_date")],
        [InlineKeyboardButton(text="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                              callback_data="events_edit_content")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                              callback_data="events_edit_start")]
    ])
    await query.message.edit_text("–ß—Ç–æ –º–µ–Ω—è—Ç—å?", reply_markup=kb)
    await query.answer()


@router.callback_query(F.data == "events_edit_date")
async def cb_events_edit_date(query: CallbackQuery):
    slots = await rq.get_all_events()
    buttons = [
        [
            InlineKeyboardButton(
                text=slot,
                callback_data=f"events_edit_date_sel|{slot}"
            )
        ]
        for slot, _ in slots
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="events_edit")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –¥–∞—Ç–µ:",
                                  reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("events_edit_date_sel|"))
async def cb_events_edit_date_sel(query: CallbackQuery):
    _, slot = query.data.split("|", 1)
    admin_event_mode[query.from_user.id] = "edit_set_date"
    admin_event_data[query.from_user.id] = {"old_date": slot}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="events_edit")]
    ])
    await query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤–º–µ—Å—Ç–æ <b>{slot}</b>:", parse_mode="HTML",
        reply_markup=kb
    )
    await query.answer()


@router.message(StateFilter(None),
                lambda message: (admin_event_mode
                                 .get(message
                                      .from_user.id) == "edit_set_date"))
async def msg_events_edit_set_date(message: Message):
    user_id = message.from_user.id
    if admin_event_mode.get(user_id) != "edit_set_date":
        return
    new_date = message.text.strip()
    old_date = admin_event_data[user_id]["old_date"]
    await rq.update_event_date(old_date, new_date)
    admin_event_mode.pop(user_id, None)
    admin_event_data.pop(user_id, None)
    await message.answer("–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
                         reply_markup=get_events_kb())


@router.callback_query(F.data == "events_edit_content")
async def cb_events_edit_content(query: CallbackQuery):
    slots = await rq.get_all_events()
    buttons = [
        [
            InlineKeyboardButton(
                text=slot,
                callback_data=f"events_edit_content_sel|{slot}"
            )
        ]
        for slot, _ in slots
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="events_edit")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
                                  " –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:",
                                  reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("events_edit_content_sel|"))
async def cb_events_edit_content_sel(query: CallbackQuery):
    _, slot = query.data.split("|", 1)
    admin_event_mode[query.from_user.id] = "edit_set_content"
    admin_event_data[query.from_user.id] = {"old_date": slot}
    event = await rq.get_event_by_date(slot)
    old_content = event.content if event else ""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="events_edit")]
    ])
    await query.message.edit_text(
        f"–°—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n<code>{old_content}</code>"
        "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:",
        parse_mode="HTML",
        reply_markup=kb
    )
    await query.answer()


@router.message(StateFilter(None),
                lambda message: (admin_event_mode
                                 .get(message
                                      .from_user.id) == "edit_set_content"))
async def msg_events_edit_set_content(message: Message):
    user_id = message.from_user.id
    if admin_event_mode.get(user_id) != "edit_set_content":
        return
    new_content = message.text.strip()
    old_date = admin_event_data[user_id]["old_date"]
    await rq.update_event_content_by_date(old_date, new_content)
    admin_event_mode.pop(user_id, None)
    admin_event_data.pop(user_id, None)
    await message.answer("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
                         reply_markup=get_events_kb())


@router.callback_query(F.data == "events_delete")
async def cb_events_delete(query: CallbackQuery):
    slots = await rq.get_all_events()
    buttons = [
        [
            InlineKeyboardButton(
                text=slot,
                callback_data=f"events_delete_sel|{slot}"
            )
        ]
        for slot, _ in slots
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="events_edit_start")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                  reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("events_delete_sel|"))
async def cb_events_delete_sel(query: CallbackQuery):
    _, slot = query.data.split("|", 1)
    event = await rq.get_event_by_date(slot)
    content = event.content if event else ""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å",
                              callback_data=f"events_delete_confirm|{slot}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å",
                              callback_data="events_delete_cancel")]
    ])
    await query.message.edit_text(f"–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?"
                                  f"\n<code>{slot} - {content}</code>",
                                  parse_mode="HTML", reply_markup=kb)
    await query.answer()


@router.callback_query(F.data == "events_delete_cancel")
async def cb_events_delete_cancel(query: CallbackQuery):
    await query.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                  reply_markup=get_events_kb())
    await query.answer()


@router.callback_query(F.data.startswith("events_delete_confirm|"))
async def cb_events_delete_confirm(query: CallbackQuery):
    _, slot = query.data.split("|", 1)
    await rq.delete_event_by_date(slot)
    await query.message.edit_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.",
                                  reply_markup=get_events_kb())
    await query.answer()


@router.message(Command("change_int"))
@admin_only
async def cmd_change_interview(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞—Ç–∞–º–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π:",
                         reply_markup=get_change_int_kb())


@router.callback_query(F.data == "change_int_add")
async def cb_change_int_add(query: CallbackQuery):
    admin_int_mode[query.from_user.id] = "add"
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú –ß–ß:–ú–ú</b>,"
        " –Ω–∞–ø—Ä–∏–º–µ—Ä `26.06 17:00`",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
                                  callback_data="change_interview_back")]
        ])
    )
    await query.answer()


@router.callback_query(F.data == "change_int_del")
async def cb_change_int_del(query: CallbackQuery):
    slots = await rq.get_interview_consultation_slots()
    if not slots:
        await query.answer("–°–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
        return await query.message.edit_text("–ù–µ—Ç –¥–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                             reply_markup=get_change_int_kb())

    buttons = [
        [InlineKeyboardButton(text=slot_text,
                              callback_data=f"change_int_delete_{slot_id}")]
        for slot_id, slot_text in slots
    ]
    buttons.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                              callback_data="change_interview_back")]
    )
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                  reply_markup=kb)
    await query.answer()


@router.message(Command("file"))
@admin_only
async def cmd_file(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                              callback_data="file_all")],
        [InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
                              callback_data="file_consult")],
        [InlineKeyboardButton(text="–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è",
                              callback_data="file_interview")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∞–π–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
                         reply_markup=kb)


@router.callback_query(F.data == "file")
@admin_only
async def file_back(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                              callback_data="file_all")],
        [InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
                              callback_data="file_consult")],
        [InlineKeyboardButton(text="–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è",
                              callback_data="file_interview")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ,"
                                     " –∫–∞–∫–æ–π —Ñ–∞–π–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
                                     reply_markup=kb)
    await safe_answer(callback)


@router.callback_query(F.data == "file_consult")
async def file_consult(callback: CallbackQuery):
    slots = await rq.get_consultation_slots()
    if not slots:
        await safe_answer(callback, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=slot_text,
                              callback_data=f"file_consult_date_{slot_id}")]
        for slot_id, slot_text in slots
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="file")]])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
                                     reply_markup=kb)


@router.callback_query(F.data.startswith("file_consult_date_"))
async def file_by_consult_date(callback: CallbackQuery):
    slot_id = int(callback.data.split("_")[-1])
    slot_text = await rq.get_slot_by_id(slot_id)
    users = await rq.get_users_by_slot(slot_text)

    if not users:
        await safe_answer(callback, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.",
                          show_alert=True)
        return

    await send_users_excel(users, caption=f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {slot_text}",
                           message=callback.message)
    await safe_answer(callback)


@router.callback_query(F.data == "file_interview")
async def file_interview(callback: CallbackQuery):
    slots = await rq.get_interview_consultation_slots()
    if not slots:
        await safe_answer(callback, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=slot_text,
                              callback_data=f"file_interview_date_{slot_id}")]
        for slot_id, slot_text in slots
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="file")]])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
                                     reply_markup=kb)


@router.callback_query(F.data.startswith("file_interview_date_"))
async def file_by_interview_date(callback: CallbackQuery):
    slot_id = int(callback.data.split("_")[-1])
    slot_text = await rq.get_interview_slot_by_id(slot_id)
    users = await rq.get_users_by_slot_interview(slot_text)

    if not users:
        await safe_answer(callback, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.",
                          show_alert=True)
        return

    await send_users_excel(users, caption=f"–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ: {slot_text}",
                           message=callback.message)
    await safe_answer(callback)


@router.callback_query(F.data == "file_all")
async def file_all(callback: CallbackQuery):
    users = await rq.get_all_users()

    if not users:
        await safe_answer(callback, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    await send_users_excel(users, caption="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                           message=callback.message)
    await safe_answer(callback)


@router.message(Command("int"))
@admin_only
async def cmd_int(message: Message):
    await show_interview_slots_list(message.answer)


@router.callback_query(F.data.startswith("int_slot_"))
async def cb_int_slot(callback: CallbackQuery):
    slot_id = int(callback.data.split("_")[-1])
    slot_text = await rq.get_interview_slot_by_id(slot_id)
    users = await rq.get_users_by_slot_interview(slot_text)

    if not users:
        text = f"–ù–∞ <b>{slot_text}</b> –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω."
    else:
        lines = []
        for idx, user in enumerate(users, start=1):
            chat = await callback.bot.get_chat(user.tg_id)
            username_text = (
                f"@{chat.username}" if chat.username else "(–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞)"
            )
            fio = (
                " ".join(part for part in [user.surname,
                                           user.name,
                                           user.patronymic] if part)
                or "(–§–ò–û –Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
            )
            phone = user.phone_number or "(—Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω)"
            year = user.entry_year or "(–≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω)"
            lines.append(f"{idx}. {fio} | {phone} | {year} | {username_text}")
        text = f"–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ <b>{slot_text}</b>:\n" + "\n".join(lines)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="int_back")]
    ])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await safe_answer(callback)


@router.callback_query(F.data == "int_back")
async def cb_int_back(callback: CallbackQuery):
    await show_interview_slots_list(callback.message.edit_text)
    await safe_answer(callback)


@router.callback_query(F.data.startswith("change_int_delete_"))
async def cb_change_int_delete(query: CallbackQuery):
    slot_id = int(query.data.split("_")[-1])
    await rq.delete_interview_slot(slot_id)
    await query.answer("–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")
    await cb_change_int_del(query)


@router.callback_query(F.data == "change_interview_back")
async def cb_change_interview_back(query: CallbackQuery):
    admin_int_mode.pop(query.from_user.id, None)
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞—Ç–∞–º–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π:",
        reply_markup=get_change_int_kb()
    )
    await query.answer()


@router.message(lambda message: admin_int_mode
                .get(message.from_user.id) == "add")
async def handle_add_interview_slot(message: Message):
    if admin_int_mode.get(message.from_user.id) != "add":
        return

    text = message.text.strip()
    if not re.fullmatch(r"\d{2}\.\d{2} \d{2}:\d{2}", text):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. "
                                    "–í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, `26.06 17:00`.",
                                    parse_mode="Markdown")

    try:
        await rq.add_interview_slot(text)
        await message.answer(f"–î–∞—Ç–∞ ¬´{text}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –¥–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        admin_int_mode.pop(message.from_user.id, None)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=get_change_int_kb())


# –∫–Ω–æ–ø–∫–∞ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
@router.callback_query(F.data == "consultation")
async def cb_consultation(callback: CallbackQuery):
    await callback.message.delete()
    await send_consultation_slots(callback.message.answer,
                                  callback.from_user.id)
    await safe_answer(callback)


@router.callback_query(F.data.startswith("slot_"))
async def cb_slot(callback: CallbackQuery):
    slot_id = int(callback.data.split("_", 1)[1])
    tg_id = callback.from_user.id

    chosen = await rq.get_slot_by_id(slot_id)
    current = await rq.get_user_slot(tg_id)

    if current == chosen:
        await rq.clear_user_slot(tg_id)
        await safe_answer(callback, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await rq.set_user_slot(tg_id, chosen)
        await safe_answer(callback, f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {chosen}")

    await send_consultation_slots(callback.message.edit_text, tg_id)


# –∫–Ω–æ–ø–∫–∞ –°–≤—è–∑—å —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º
@router.callback_query(F.data == "mentor")
async def cb_mentor(callback: CallbackQuery):
    await callback.message.delete()
    await send_mentor(callback.message)
    await safe_answer(callback)


# –∫–Ω–æ–ø–∫–∞ –ö–∞–ª–µ–Ω–¥–∞—Ä—å
@router.callback_query(F.data == "events")
async def cb_events(callback: CallbackQuery):
    await callback.message.delete()
    await send_events(callback.message.answer)
    await safe_answer(callback)


@router.message(Command("change_cons"))
@admin_only
async def cmd_change_cons(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞—Ç–∞–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:",
                         reply_markup=get_change_cons_kb())


@router.callback_query(F.data == "change_cons_add")
async def cb_change_cons_add(query: CallbackQuery):
    admin_cons_mode[query.from_user.id] = "add"
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú –ß–ß:–ú–ú</b>,"
        " –Ω–∞–ø—Ä–∏–º–µ—Ä `26.06 17:00`",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
                                      callback_data="change_cons_back")]
            ]
        )
    )
    await query.answer()


@router.callback_query(F.data == "change_cons_del")
async def cb_change_cons_del(query: CallbackQuery):
    slots = await rq.get_consultation_slots()
    if not slots:
        await query.answer("–°–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
        return await query.message.edit_text("–ù–µ—Ç –¥–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                             reply_markup=get_change_cons_kb())

    buttons = [
        [InlineKeyboardButton(text=slot_text,
                              callback_data=f"change_cons_delete_{slot_id}")]
        for slot_id, slot_text in slots
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="change_cons_back")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                  reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("change_cons_delete_"))
async def cb_change_cons_delete(query: CallbackQuery):
    slot_id = int(query.data.split("_")[-1])
    await rq.delete_consultation_slot(slot_id)
    await query.answer("–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=False)
    await cb_change_cons_del(query)


@router.callback_query(F.data == "change_cons_back")
async def cb_change_cons_back(query: CallbackQuery):
    admin_cons_mode.pop(query.from_user.id, None)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞—Ç–∞–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:",
                                  reply_markup=get_change_cons_kb())
    await query.answer()


@router.message(StateFilter(None),
                lambda message: (admin_cons_mode
                                 .get(message.from_user.id) == "add"))
async def handle_add_slot(message: Message):
    user_id = message.from_user.id
    if admin_cons_mode.get(user_id) != "add":
        return

    text = message.text.strip()
    if not re.fullmatch(r"\d{2}\.\d{2} \d{2}:\d{2}", text):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."
                                    " –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, `26.06 17:00`.",
                                    parse_mode="Markdown")

    try:
        await rq.add_consultation_slot(text)
        await message.answer(f"–î–∞—Ç–∞ ¬´{text}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –¥–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        admin_cons_mode.pop(user_id, None)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=get_change_cons_kb())


@router.message(Command("cons"))
@admin_only
async def cmd_cons(message: Message):
    await show_slots_list(message.answer)


@router.callback_query(F.data.startswith("cons_slot_"))
async def cb_cons_slot(callback: CallbackQuery):
    slot_id = int(callback.data.split("_", 2)[2])
    slot_text = await rq.get_slot_by_id(slot_id)

    users = await rq.get_users_by_slot(slot_text)

    if not users:
        text = f"–ù–∞ <b>{slot_text}</b> –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω."
    else:
        lines = []
        for idx, user in enumerate(users, start=1):
            chat = await callback.bot.get_chat(user.tg_id)
            username_text = (
                f"@{chat.username}" if chat.username else "(–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞)"
            )
            fio = (
                " ".join(part for part in [user.surname,
                                           user.name,
                                           user.patronymic] if part)
                or "(–§–ò–û –Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
            )
            phone = user.phone_number or "(—Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω)"
            year = user.entry_year or "(–≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω)"

            lines.append(f"{idx}. {fio} | {phone} | {year} | {username_text}")

        text = f"–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ <b>{slot_text}</b>:\n" + "\n".join(lines)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cons_back")]
    ])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await safe_answer(callback)


@router.callback_query(F.data == "cons_back")
async def cb_cons_back(callback: CallbackQuery):
    await show_slots_list(callback.message.edit_text)
    await safe_answer(callback)


# –∫–æ–º–∞–Ω–¥–∞ /send
@router.message(Command("send"))
@admin_only
async def send_broadcast(message: Message):
    if message.caption:
        content = message.caption
        if content.lower().startswith("/send"):
            content = content[5:].strip()
    else:
        content = message.text.removeprefix("/send").strip()

    if not content and not (message.photo or message.video):
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç "
                                    " –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send –∏–ª–∏"
                                    " –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")

    users = await rq.get_all_subscribed_users()
    success, failed = 0, 0

    user_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                  callback_data="main_menu_from_send")]
        ]
    )

    for user in users:
        try:
            if message.photo:
                await message.bot.send_photo(
                    chat_id=user.tg_id,
                    photo=message.photo[-1].file_id,
                    caption=content,
                    reply_markup=user_keyboard
                )
            elif message.video:
                await message.bot.send_video(
                    chat_id=user.tg_id,
                    video=message.video.file_id,
                    caption=content,
                    reply_markup=user_keyboard
                )
            else:
                await message.bot.send_message(
                    chat_id=user.tg_id,
                    text=content,
                    reply_markup=user_keyboard
                )
            success += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            failed += 1

    await message.answer(
        f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}"
    )


@router.message(FSMRegistration.full_name)
async def reg_full_name(message: Message, state: FSMContext):
    parts = message.text.strip().split()
    if len(parts) == 3:
        surname, name, patronymic = parts
    elif len(parts) == 2:
        surname, name = parts
        patronymic = "-"
    else:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Ü–µ–ª–∏–∫–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
            "–ò–ª–∏ –±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
        )
        return

    await state.update_data(surname=surname, name=name, patronymic=patronymic)
    await state.set_state(FSMRegistration.entry_year)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</b>:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="2025",
                                      callback_data="year_2025")],
                [InlineKeyboardButton(text="2026",
                                      callback_data="year_2026")],
                [InlineKeyboardButton(text="2027",
                                      callback_data="year_2027")],
                [InlineKeyboardButton(text="–ü–æ—Å–ª–µ 2027",
                                      callback_data="year_2027+")],
            ]
        )
    )


@router.callback_query(F.data.startswith("year_"), FSMRegistration.entry_year)
async def reg_entry_year(callback: CallbackQuery, state: FSMContext):
    year = callback.data.split("_")[1]
    if year == "2027+":
        await state.update_data(entry_year="–ü–æ—Å–ª–µ 2027")
    else:
        await state.update_data(entry_year=year)
    await state.set_state(FSMRegistration.phone)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>"
                                  " –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ "
                                  "—É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:", parse_mode="HTML")
    await safe_answer(callback)


@router.message(FSMRegistration.phone)
async def reg_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not re.fullmatch(r"\+7\d{3}\d{3}\d{2}\d{2}", phone) and phone != "-":
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."
                             " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
                             " +7XXXXXXXXXX\n–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ -")
        return
    await state.update_data(phone=phone)

    await state.set_state(FSMRegistration.city)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>–≥–æ—Ä–æ–¥</b>: ", parse_mode="HTML")


@router.message(FSMRegistration.city)
async def reg_city(message: Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(city=city)

    await state.set_state(FSMRegistration.direction)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏</b>:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="39.03.01 –°–æ—Ü–∏–æ–ª–æ–≥–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                                      " –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π",
                                      callback_data="dir_1")],
                [InlineKeyboardButton(text="38.03.01 –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏"
                                      " –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                                      callback_data="dir_2")],
                [InlineKeyboardButton(text="42.03.01 –†–µ–∫–ª–∞–º–∞ –∏ —Å–≤—è–∑–∏ —Å "
                                      "–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é",
                                      callback_data="dir_3")],
                [InlineKeyboardButton(text="38.03.06 –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ "
                                      "–ª–æ–≥–∏—Å—Ç–∏–∫–∞ –≤ –∫–æ–º–º–µ—Ä—Ü–∏–∏",
                                      callback_data="dir_4")],
                [InlineKeyboardButton(text="38.05.01 –≠–∫–æ–Ω–æ–º–∏–∫–æ-–ø—Ä–∞–≤–æ–≤–æ–µ"
                                      " –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π"
                                      " –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data="dir_5")],
                [InlineKeyboardButton(text="40.03.01 –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è",
                                      callback_data="dir_6")],
                [InlineKeyboardButton(text="40.05.01 –ü—Ä–∞–≤–æ–≤–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ"
                                      " –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                                      callback_data="dir_7")],
                [InlineKeyboardButton(text="41.03.06 –ü—É–±–ª–∏—á–Ω–∞—è "
                                      "–ø–æ–ª–∏—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                                      callback_data="dir_8")]
            ]
        )
    )


@router.callback_query(F.data.startswith("dir_"), FSMRegistration.direction)
async def reg_direction(callback: CallbackQuery, state: FSMContext):
    direction_code = callback.data.strip()
    direction = DIRECTIONS.get(direction_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    await state.update_data(direction=direction)

    data = await state.get_data()
    await rq.set_fio(callback.from_user.id, data["surname"], data["name"],
                     data["patronymic"])
    await rq.set_entry_year(callback.from_user.id, data["entry_year"])
    await rq.set_phone_number(callback.from_user.id, data["phone"])
    await rq.set_city(callback.from_user.id, data["city"])
    await rq.set_direction(callback.from_user.id, data["direction"])
    await state.clear()

    await safe_answer(callback, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await send_main_menu(callback)


@router.callback_query(F.data == "edit_profile")
async def cb_edit_profile(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_profile_kb()
    )


@router.callback_query(F.data == "edit_fio")
async def cb_edit_fio(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_edit_mode[user_id] = "fio"

    prompt = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–§–ò–û</b>"
                                              " —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
                                              parse_mode="HTML")
    user_prompt_message_id[user_id] = prompt.message_id
    await safe_answer(callback)


@router.callback_query(F.data == "edit_phone")
async def cb_edit_phone_number(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_edit_mode[user_id] = "phone"

    prompt = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à"
                                              " <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>"
                                              " –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
                                              parse_mode="HTML")
    user_prompt_message_id[user_id] = prompt.message_id
    await safe_answer(callback)


@router.callback_query(F.data == "edit_year")
async def cb_edit_year(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_edit_mode[user_id] = "year"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="2025", callback_data="year_2025")],
        [InlineKeyboardButton(text="2026", callback_data="year_2026")],
        [InlineKeyboardButton(text="2027", callback_data="year_2027")],
        [InlineKeyboardButton(text="–ü–æ—Å–ª–µ 2027", callback_data="year_2027+")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_profile")]
    ])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:",
                                     reply_markup=keyboard)
    await safe_answer(callback)


@router.callback_query(F.data.startswith("year_"))
async def cb_select_year(callback: CallbackQuery):
    user_id = callback.from_user.id
    year = callback.data.split("_")[1]

    if year not in ("2025", "2026", "2027", "2027+"):
        return

    if year == "2027+":
        await rq.set_entry_year(user_id, "–ü–æ—Å–ª–µ 2027")
    else:
        await rq.set_entry_year(user_id, year)

    user_edit_mode.pop(user_id, None)
    user_prompt_message_id.pop(user_id, None)

    await callback.message.delete()

    await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_profile_kb()
    )
    await safe_answer(callback)


@router.callback_query(F.data == "edit_city")
async def cb_edit_city(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_edit_mode[user_id] = "city"

    prompt = await callback.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>–≥–æ—Ä–æ–¥</b>:",
        parse_mode="HTML"
    )
    user_prompt_message_id[user_id] = prompt.message_id
    await safe_answer(callback)


@router.callback_query(F.data == "edit_direction")
async def cb_edit_direction(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_edit_mode[user_id] = "direction"

    buttons = [
        [InlineKeyboardButton(text=text, callback_data=code)]
        for code, text in DIRECTIONS.items()
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="edit_profile")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏</b>:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await safe_answer(callback)


@router.callback_query(F.data.startswith("dir_"))
async def cb_edit_direction_select(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_edit_mode.get(user_id) != "direction":
        return

    direction_code = callback.data.strip()
    direction = DIRECTIONS.get(direction_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    await rq.set_direction(user_id, direction)

    user_edit_mode.pop(user_id, None)
    user_prompt_message_id.pop(user_id, None)

    await callback.message.delete()

    await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_profile_kb()
    )
    await safe_answer(callback)


@router.message(StateFilter(None),
                lambda message: message.from_user.id in user_edit_mode)
async def msg_edit_profile(message: Message):
    user_id = message.from_user.id

    if user_id not in user_edit_mode:
        return

    mode = user_edit_mode[user_id]
    prompt_id = user_prompt_message_id.get(user_id)

    if mode == "fio":
        parts = message.text.strip().split()
        if len(parts) != 3:
            await message.delete()
            err = await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤"
                                       " —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ")
            user_error_message_id[user_id] = err.message_id
            return
        surname, name, patronymic = parts
        await rq.set_fio(user_id, surname, name, patronymic)

    elif mode == "phone":
        phone = message.text.strip()
        if not re.fullmatch(r"\+7\d{3}\d{3}\d{2}\d{2}",
                            phone) and phone != "-":
            await message.delete()
            err = await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."
                                       " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: +7XXXXXXXXXX"
                                       "\n–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ -")
            user_error_message_id[user_id] = err.message_id
            return
        await rq.set_phone_number(user_id, phone)

    elif mode == "city":
        city = message.text.strip()
        await rq.set_city(user_id, city)

    user_edit_mode.pop(user_id, None)
    user_prompt_message_id.pop(user_id, None)

    await message.delete()
    if prompt_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id,
                                             message_id=prompt_id)
        except Exception:
            pass

    err_id = user_error_message_id.pop(user_id, None)
    if err_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id,
                                             message_id=err_id)
        except Exception:
            pass

    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_profile_kb()
    )
