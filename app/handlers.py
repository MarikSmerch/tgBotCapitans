from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.filters import CommandStart, Command
import app.database.requests as rq

from aiogram.fsm.context import FSMContext
from app.states.registration import FSMRegistration

import re

router = Router()


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")],
            [InlineKeyboardButton(text="–û –ö–∞–ø–∏—Ç–∞–Ω–∞—Ö", callback_data="about_captains")],
            [InlineKeyboardButton(text="–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="features")],
            [InlineKeyboardButton(text="–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="interview")],
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")]
        ]
    )
    caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    await message.answer_photo(photo=FSInputFile("C:\\Users\\aramb\\projects\\tgBotCapitans\\app\\img\\cards.jpg"), caption=caption, reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
async def send_profile_menu(send_func, user):
    subscribed = bool(await rq.get_subscribed(user.id))
    user = await rq.get_user_by_tg_id(user.id)

    hidden_phone = user.phone_number[:-4] + "XXXX"

    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: {user.surname} {user.name} {user.patronymic}\n"
        f"–ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {user.entry_year}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {hidden_phone}\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¢–î:{user.contact_url}\n"
    )

    sub_text = "üì© –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if subscribed else "üì¥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
                InlineKeyboardButton(text=sub_text, callback_data="toggle_subscription")
            ],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile")]
        ]
    )

    await send_func(profile_text, parse_mode="HTML", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–∞–ø–∏—Ç–∞–Ω–∞—Ö
async def send_about_captains(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
async def send_features(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:)", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö
async def send_interview(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
async def send_events(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: —Å–¥–∞—á–∞ –±—É–º–∞–≥–∏", reply_markup=keyboard)


# /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    await rq.set_user(user_id)
    user = await rq.get_user_by_tg_id(user_id)

    if not (user.surname and user.name and user.patronymic and user.entry_year and user.phone_number and user.contact_url):
        await state.set_state(FSMRegistration.surname)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ù–∞—á–Ω—ë–º —Å <b>—Ñ–∞–º–∏–ª–∏–∏</b>:", parse_mode="HTML")
    else:
        await send_main_menu(message)


# –∫–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def cb_main(callback: CallbackQuery):
    await rq.set_user(callback.from_user.id)
    await callback.message.delete()
    await send_main_menu(callback.message)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–∑ /send)
@router.callback_query(F.data == "main_menu_from_send")
async def cb_main_from_send(callback: CallbackQuery):
    await rq.set_user(callback.from_user.id)
    await send_main_menu(callback.message)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –ü—Ä–æ—Ñ–∏–ª—å
@router.callback_query(F.data == "show_profile")
async def cb_show_profile(callback: CallbackQuery):
    await callback.message.delete()
    await send_profile_menu(callback.message.answer, callback.from_user)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –í–∫–ª/–í—ã–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É
@router.callback_query(F.data == "toggle_subscription")
async def cb_toggle(callback: CallbackQuery):
    user_id = callback.from_user.id
    await rq.change_subscribed(user_id)
    await send_profile_menu(callback.message.edit_text, callback.from_user)
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω", show_alert=False)


# –∫–Ω–æ–ø–∫–∞ –û –ö–∞–ø–∏—Ç–∞–Ω–∞—Ö
@router.callback_query(F.data == "about_captains")
async def cb_captains(callback: CallbackQuery):
    await callback.message.delete()
    await send_about_captains(callback.message.answer)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "features")
async def cb_features(callback: CallbackQuery):
    await callback.message.delete()
    await send_features(callback.message.answer)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "interview")
async def cb_interview(callback: CallbackQuery):
    await callback.message.delete()
    await send_interview(callback.message.answer)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "events")
async def cb_events(callback: CallbackQuery):
    await callback.message.delete()
    await send_events(callback.message.answer)
    await callback.answer()


# –∫–æ–º–∞–Ω–¥–∞ /send
@router.message(Command("send"))
async def send_broadcast(message: Message):
    if message.from_user.id != 807480894:
        return await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    content = message.text.removeprefix("/send").strip()
    if not content:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send")

    users = await rq.get_all_subscribed_users()

    success, failed = 0, 0

    user_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_from_send")]
        ]
    )

    for user in users:
        try:
            await message.bot.send_message(user.tg_id, content, reply_markup=user_keyboard)
            success += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            failed += 1

    await message.answer(
        f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}"
    )


@router.message(FSMRegistration.surname)
async def reg_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await state.set_state(FSMRegistration.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:", parse_mode="HTML")


@router.message(FSMRegistration.name)
async def reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(FSMRegistration.patronymic)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–æ—Ç—á–µ—Å—Ç–≤–æ</b>:", parse_mode="HTML")


@router.message(FSMRegistration.patronymic)
async def reg_patronymic(message: Message, state: FSMContext):
    await state.update_data(patronymic=message.text.strip())
    await state.set_state(FSMRegistration.entry_year)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ <b>–≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</b>:", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="2023", callback_data="year_2023")],
            [InlineKeyboardButton(text="2024", callback_data="year_2024")],
            [InlineKeyboardButton(text="2025", callback_data="year_2025")]
        ]
    ))


@router.callback_query(F.data.startswith("year_"), FSMRegistration.entry_year)
async def reg_entry_year(callback: CallbackQuery, state: FSMContext):
    year = int(callback.data.split("_")[1])
    await state.update_data(entry_year=year)
    await state.set_state(FSMRegistration.phone)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7(XXX)XXX-XX-XX:", parse_mode="HTML")
    await callback.answer()


@router.message(FSMRegistration.phone)
async def reg_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not re.fullmatch(r"\+7\(\d{3}\)\d{3}-\d{2}-\d{2}", phone):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: +7(XXX)XXX-XX-XX")
        return
    await state.update_data(phone=phone)
    await state.set_state(FSMRegistration.social_link)
    await message.answer("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –¢–î:")


@router.message(FSMRegistration.social_link)
async def reg_social(message: Message, state: FSMContext):
    link = message.text.strip()
    if not link.startswith("http"):
        await message.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http")
        return

    await state.update_data(contact_url=link)
    data = await state.get_data()
    await rq.set_fio(message.from_user.id, data["surname"], data["name"], data["patronymic"])
    await rq.set_entry_year(message.from_user.id, data["entry_year"])
    await rq.set_phone_number(message.from_user.id, data["phone"])
    await rq.set_contact_url(message.from_user.id, data["contact_url"])
    await state.clear()

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await send_main_menu(message)