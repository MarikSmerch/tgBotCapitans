from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
import app.database.requests as rq

router = Router()


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")],
            [InlineKeyboardButton(text="–û –ö–∞–ø–∏—Ç–∞–Ω–∞—Ö", callback_data="about_captains")],
            [InlineKeyboardButton(text="–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="features")],
            [InlineKeyboardButton(text="–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="interview")],
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")]
        ]
    )
    await send_func("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
async def send_profile_menu(send_func, user):
    subscribed = bool(await rq.get_subscribed(user.id))

    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: {user.full_name}\n"
        f"ID: <code>{user.id}</code>\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '‚Äî'}"
    )

    sub_text = "üì© –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if subscribed else "üì¥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
                InlineKeyboardButton(text=sub_text, callback_data="toggle_subscription")
            ]
        ]
    )

    await send_func(profile_text, parse_mode="HTML", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–∞–ø–∏—Ç–∞–Ω–∞—Ö
async def send_about_captains(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
async def send_features(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:)", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö
async def send_interview(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
async def send_events(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: —Å–¥–∞—á–∞ –±—É–º–∞–≥–∏", reply_markup=keyboard)


# /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await send_main_menu(message.answer)


# –∫–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def cb_main(callback: CallbackQuery):
    await rq.set_user(callback.from_user.id)
    await send_main_menu(callback.message.edit_text)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –ü—Ä–æ—Ñ–∏–ª—å
@router.callback_query(F.data == "show_profile")
async def cb_show_profile(callback: CallbackQuery):
    await send_profile_menu(callback.message.edit_text, callback.from_user)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –í–∫–ª/–í—ã–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É
@router.callback_query(F.data == "toggle_subscription")
async def cb_toggle(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await rq.change_subscribed(user_id)
    # –∏ —Å—Ä–∞–∑—É —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ-–Ω–æ–≤–æ–π
    await send_profile_menu(callback.message.edit_text, callback.from_user)
    # –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —É–±–∏—Ä–∞–Ω–∏—è —á–∞—Å–æ–≤
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω", show_alert=False)


# –∫–Ω–æ–ø–∫–∞ –û –ö–∞–ø–∏—Ç–∞–Ω–∞—Ö
@router.callback_query(F.data == "about_captains")
async def cb_captains(callback: CallbackQuery):
    await send_about_captains(callback.message.edit_text)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "features")
async def cb_features(callback: CallbackQuery):
    await send_features(callback.message.edit_text)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "interview")
async def cb_interview(callback: CallbackQuery):
    await send_interview(callback.message.edit_text)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "events")
async def cb_events(callback: CallbackQuery):
    await send_events(callback.message.edit_text)
    await callback.answer()
