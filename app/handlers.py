from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.filters import CommandStart, Command
import app.database.requests as rq

from aiogram.fsm.context import FSMContext
from app.states.registration import FSMRegistration

import re

router = Router()

user_edit_mode = {}
user_prompt_message_id = {}
user_error_message_id = {}
admin_cons_mode = {}


def get_edit_profile_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–ò–û", callback_data="edit_fio")],
        [InlineKeyboardButton(text="–ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", callback_data="edit_year")],
        [InlineKeyboardButton(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="edit_phone")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_profile")]
    ])


def get_change_cons_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É", callback_data="change_cons_add")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É", callback_data="change_cons_del")]
    ])


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")],
            [InlineKeyboardButton(text="–û –ö–∞–ø–∏—Ç–∞–Ω–∞—Ö", callback_data="about_captains")],
            [InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")],
            [InlineKeyboardButton(text="–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="interview")],
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")]
        ]
    )
    caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    await message.answer_photo(photo=FSInputFile("C:\\Users\\aramb\\projects\\tgBotCapitans\\app\\img\\cards.jpg"), caption=caption, reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
async def send_profile_menu(send_func, user):
    subscribed = bool(await rq.get_subscribed(user.id))
    user_p = await rq.get_user_by_tg_id(user.id)

    if user_p.phone_number != "-":
        hidden_phone = user_p.phone_number[:-4] + "XXXX"
    else:
        hidden_phone = user_p.phone_number

    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: {user_p.surname} {user_p.name} {user_p.patronymic}\n"
        f"–ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {user_p.entry_year}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {hidden_phone}\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '‚Äî'}"
    )

    sub_text = "üì© –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if subscribed else "üì¥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
                InlineKeyboardButton(text=sub_text, callback_data="toggle_subscription")
            ],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile")]
        ]
    )

    await send_func(profile_text, parse_mode="HTML", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–∞–ø–∏—Ç–∞–Ω–∞—Ö
async def send_about_captains(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
async def send_features(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="appointment_consultation")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö
async def send_interview(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", reply_markup=keyboard)


# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
async def send_events(send_func):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await send_func("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: —Å–¥–∞—á–∞ –±—É–º–∞–≥–∏", reply_markup=keyboard)


async def send_consultation_slots(send_func, tg_id: int):
    slots = await rq.get_consultation_slots()
    user_slot = await rq.get_user_slot(tg_id)

    buttons = []
    for slot_id, slot_text in slots:
        label = f"{slot_text}{' ‚úÖ' if slot_text == user_slot else ''}"
        buttons.append([InlineKeyboardButton(text=label, callback_data=f"slot_{slot_id}")])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await send_func("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=kb)


async def show_slots_list(send_func):
    slots = await rq.get_consultation_slots()
    buttons = [
        [InlineKeyboardButton(text=slot_text, callback_data=f"cons_slot_{slot_id}")]
        for slot_id, slot_text in slots
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await send_func("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:", reply_markup=kb)


# /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    await rq.set_user(user_id)
    user = await rq.get_user_by_tg_id(user_id)

    if not (user.surname and user.name and user.patronymic and user.entry_year and user.phone_number):
        await state.set_state(FSMRegistration.full_name)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ <b>–§–ò–û</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:", parse_mode="HTML")
    else:
        await send_main_menu(message)


# –∫–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def cb_main(callback: CallbackQuery):
    await rq.set_user(callback.from_user.id)
    await callback.message.delete()
    await send_main_menu(callback.message)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–∑ /send)
@router.callback_query(F.data == "main_menu_from_send")
async def cb_main_from_send(callback: CallbackQuery):
    await rq.set_user(callback.from_user.id)
    await send_main_menu(callback.message)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –ü—Ä–æ—Ñ–∏–ª—å
@router.callback_query(F.data == "show_profile")
async def cb_show_profile(callback: CallbackQuery):
    await callback.message.delete()
    await send_profile_menu(callback.message.answer, callback.from_user)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –í–∫–ª/–í—ã–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É
@router.callback_query(F.data == "toggle_subscription")
async def cb_toggle(callback: CallbackQuery):
    user_id = callback.from_user.id
    await rq.change_subscribed(user_id)
    await send_profile_menu(callback.message.edit_text, callback.from_user)
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω", show_alert=False)


# –∫–Ω–æ–ø–∫–∞ –û –ö–∞–ø–∏—Ç–∞–Ω–∞—Ö
@router.callback_query(F.data == "about_captains")
async def cb_captains(callback: CallbackQuery):
    await callback.message.delete()
    await send_about_captains(callback.message.answer)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
@router.callback_query(F.data == "consultation")
async def cb_consultation(callback: CallbackQuery):
    await rq.set_user(callback.from_user.id)
    await callback.message.delete()
    await send_consultation_slots(callback.message.answer, callback.from_user.id)
    await callback.answer()


@router.callback_query(F.data.startswith("slot_"))
async def cb_slot(callback: CallbackQuery):
    slot_id = int(callback.data.split("_", 1)[1])
    tg_id = callback.from_user.id

    chosen = await rq.get_slot_by_id(slot_id)
    current = await rq.get_user_slot(tg_id)

    if current == chosen:
        await rq.clear_user_slot(tg_id)
        await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await rq.set_user_slot(tg_id, chosen)
        await callback.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {chosen}")

    await send_consultation_slots(callback.message.edit_text, tg_id)


# –∫–Ω–æ–ø–∫–∞ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "interview")
async def cb_interview(callback: CallbackQuery):
    await callback.message.delete()
    await send_interview(callback.message.answer)
    await callback.answer()


# –∫–Ω–æ–ø–∫–∞ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "events")
async def cb_events(callback: CallbackQuery):
    await callback.message.delete()
    await send_events(callback.message.answer)
    await callback.answer()


@router.message(Command("change_cons"))
async def cmd_change_cons(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞—Ç–∞–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:", reply_markup=get_change_cons_kb())


@router.callback_query(F.data == "change_cons_add")
async def cb_change_cons_add(query: CallbackQuery):
    admin_cons_mode[query.from_user.id] = "add"
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú –ß–ß:–ú–ú</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä `26.06 17:00`",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="change_cons_back")]]
        )
    )
    await query.answer()


@router.callback_query(F.data == "change_cons_del")
async def cb_change_cons_del(query: CallbackQuery):
    slots = await rq.get_consultation_slots()
    if not slots:
        await query.answer("–°–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
        return await query.message.edit_text("–ù–µ—Ç –¥–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_change_cons_kb())

    buttons = [
        [InlineKeyboardButton(text=slot_text, callback_data=f"change_cons_delete_{slot_id}")]
        for slot_id, slot_text in slots
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="change_cons_back")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await query.answer()


@router.callback_query(F.data.startswith("change_cons_delete_"))
async def cb_change_cons_delete(query: CallbackQuery):
    slot_id = int(query.data.split("_")[-1])
    await rq.delete_consultation_slot(slot_id)
    await query.answer("–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=False)
    await cb_change_cons_del(query)


@router.callback_query(F.data == "change_cons_back")
async def cb_change_cons_back(query: CallbackQuery):
    admin_cons_mode.pop(query.from_user.id, None)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞—Ç–∞–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:", reply_markup=get_change_cons_kb())
    await query.answer()


@router.message()
async def handle_add_slot(message: Message):
    user_id = message.from_user.id
    if admin_cons_mode.get(user_id) != "add":
        return

    text = message.text.strip()
    if not re.fullmatch(r"\d{2}\.\d{2} \d{2}:\d{2}", text):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, `26.06 17:00`.", parse_mode="Markdown")

    try:
        await rq.add_consultation_slot(text)
        await message.answer(f"–î–∞—Ç–∞ ¬´{text}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –¥–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        admin_cons_mode.pop(user_id, None)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_change_cons_kb())


@router.message(Command("cons"))
async def cmd_cons(message: Message):
    await show_slots_list(message.answer)


@router.callback_query(F.data.startswith("cons_slot_"))
async def cb_cons_slot(callback: CallbackQuery):
    slot_id = int(callback.data.split("_", 2)[2])
    slot_text = await rq.get_slot_by_id(slot_id)

    users = await rq.get_users_by_slot(slot_text)

    if not users:
        text = f"–ù–∞ <b>{slot_text}</b> –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω."
    else:
        lines = []
        for idx, user in enumerate(users, start=1):
            chat = await callback.bot.get_chat(user.tg_id)
            username_text = f"@{chat.username}" if chat.username else "(–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞)"
            fio = " ".join(filter(None, [user.surname, user.name, user.patronymic])) or "(–§–ò–û –Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
            phone = user.phone_number or "(—Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω)"
            year = user.entry_year or "(–≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω)"

            lines.append(f"{idx}. {fio} | {phone} | {year} | {username_text}")

        text = f"–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ <b>{slot_text}</b>:\n" + "\n".join(lines)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cons_back")]
    ])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "cons_back")
async def cb_cons_back(callback: CallbackQuery):
    await show_slots_list(callback.message.edit_text)
    await callback.answer()


# –∫–æ–º–∞–Ω–¥–∞ /send
@router.message(Command("send"))
async def send_broadcast(message: Message):
    if message.from_user.id != 807480894:
        return await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    content = message.text.removeprefix("/send").strip()
    if not content:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send")

    users = await rq.get_all_subscribed_users()

    success, failed = 0, 0

    user_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_from_send")]
        ]
    )

    for user in users:
        try:
            await message.bot.send_message(user.tg_id, content, reply_markup=user_keyboard)
            success += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            failed += 1

    await message.answer(
        f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}"
    )


@router.message(FSMRegistration.full_name)
async def reg_full_name(message: Message, state: FSMContext):
    parts = message.text.strip().split()
    if len(parts) != 3:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Ü–µ–ª–∏–∫–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )
        return

    surname, name, patronymic = parts
    await state.update_data(surname=surname, name=name, patronymic=patronymic)
    await state.set_state(FSMRegistration.entry_year)

    # —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ–¥
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</b>:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="2023", callback_data="year_2023")],
                [InlineKeyboardButton(text="2024", callback_data="year_2024")],
                [InlineKeyboardButton(text="2025", callback_data="year_2025")]
            ]
        )
    )


@router.callback_query(F.data.startswith("year_"), FSMRegistration.entry_year)
async def reg_entry_year(callback: CallbackQuery, state: FSMContext):
    year = int(callback.data.split("_")[1])
    await state.update_data(entry_year=year)
    await state.set_state(FSMRegistration.phone)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:", parse_mode="HTML")
    await callback.answer()


@router.message(FSMRegistration.phone)
async def reg_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not re.fullmatch(r"\+7\d{3}\d{3}\d{2}\d{2}", phone) and phone != "-":
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: +7XXXXXXXXXX\n–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ -")
        return
    await state.update_data(phone=phone)

    data = await state.get_data()
    await rq.set_fio(message.from_user.id, data["surname"], data["name"], data["patronymic"])
    await rq.set_entry_year(message.from_user.id, data["entry_year"])
    await rq.set_phone_number(message.from_user.id, data["phone"])
    await state.clear()

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await send_main_menu(message)


@router.callback_query(F.data == "edit_profile")
async def cb_edit_profile(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_profile_kb()
    )


@router.callback_query(F.data == "edit_fio")
async def cb_edit_fio(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_edit_mode[user_id] = "fio"

    prompt = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–§–ò–û</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:", parse_mode="HTML")
    user_prompt_message_id[user_id] = prompt.message_id
    await callback.answer()


@router.callback_query(F.data == "edit_phone")
async def cb_edit_phone_number(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_edit_mode[user_id] = "phone"

    prompt = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:", parse_mode="HTML")
    user_prompt_message_id[user_id] = prompt.message_id
    await callback.answer()


@router.callback_query(F.data == "edit_year")
async def cb_edit_year(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_edit_mode[user_id] = "year"

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="2023", callback_data="year_2023")],
        [InlineKeyboardButton(text="2024", callback_data="year_2024")],
        [InlineKeyboardButton(text="2025", callback_data="year_2025")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_profile")]
    ]))
    await callback.answer()


@router.callback_query(F.data.startswith("year_"))
async def cb_select_year(callback: CallbackQuery):
    user_id = callback.from_user.id
    year = callback.data.split("_")[1]

    if year not in ("2023", "2024", "2025"):
        return

    await rq.set_entry_year(user_id, int(year))

    user_edit_mode.pop(user_id, None)
    user_prompt_message_id.pop(user_id, None)

    await callback.message.delete()

    await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_profile_kb()
    )
    await callback.answer()


@router.message()
async def msg_edit_profile(message: Message):
    user_id = message.from_user.id

    if user_id not in user_edit_mode:
        return

    mode = user_edit_mode[user_id]
    prompt_id = user_prompt_message_id.get(user_id)

    if mode == "fio":
        parts = message.text.strip().split()
        if len(parts) != 3:
            await message.delete()
            err = await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ")
            user_error_message_id[user_id] = err.message_id
            return
        surname, name, patronymic = parts
        await rq.set_fio(user_id, surname, name, patronymic)

    elif mode == "phone":
        phone = message.text.strip()
        if not re.fullmatch(r"\+7\d{3}\d{3}\d{2}\d{2}", phone) and phone != "-":
            await message.delete()
            err = await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: +7XXXXXXXXXX\n–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ -")
            user_error_message_id[user_id] = err.message_id
            return
        await rq.set_phone_number(user_id, phone)

    user_edit_mode.pop(user_id, None)
    user_prompt_message_id.pop(user_id, None)

    await message.delete()
    if prompt_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_id)
        except:
            pass

    err_id = user_error_message_id.pop(user_id, None)
    if err_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=err_id)
        except:
            pass

    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_profile_kb()
    )
